elementappearsmorethan(n\3)times(medium2)

Medium2:

Question:

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 

Solution:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>(); 
        int num1 = 0, num2 = 0, count1 = 0, count2 = 0; 

        for (int num : nums) {
            if (num1 == num) 
                count1++;  
            else if (num2 == num) 
                count2++;  
            else if (count1 == 0) {
                num1 = num;  
                count1 = 1;   
        } else if (count2 == 0) {
                num2 = num;  
                count2 = 1;   
        } else {
            count1--;   
            count2--;
    }
}

count1 = count2 = 0; 
for (int num : nums) {
    if (num == num1)
        count1++;   
    else if (num == num2)
        count2++;   
}

if (count1 > nums.length / 3)
    list.add(num1);
if (count2 > nums.length / 3)
    list.add(num2);
return list; 
         }
}

Explanation:

Initialize variables num1, num2, count1, and count2 to 0.
Iterate through the array nums:
If num1 is equal to the current number, increment count1.
Else if num2 is equal to the current number, increment count2.
If count1 is 0, update num1 to the current number, set count1 to 1.
If count2 is 0, update num2 to the current number, set count2 to 1.
If count1 and count2 are non-zero, decrement both count1 and count2.
Reset count1 and count2 to 0.
Iterate through the array nums again:
If the current number is equal to num1, increment count1.
Else if the current number is equal to num2, increment count2.
If count1 is greater than ⌊n/3⌋, add num1 to the result list.
If count2 is greater than ⌊n/3⌋, add num2 to the result list.
Return the list containing the majority elements found.

